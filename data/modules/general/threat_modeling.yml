category: General
description: Have you performed a theat assessment on your application (aka a Threat Model)?
minimumRisk: Low Risk
checkLists:
  Diagram:
      - question: We have created a diagram of the software, can tell a story about the system and consider what could go wrong without using words such as "sometimes" or "also".
      - question: The diagram show all the [trust boundaries](https://en.wikipedia.org/wiki/Trust_boundary) and cover all application roles, and all network interfaces.
      - question: The diagram reflects the current or planned reality of the software.
  Threats:
      - question: We have looked for each of the STRIDE threats below for each element and dataflow in the diagram.
      - question: We have written down or filed a bug for each threat discovered.
      - question: There is a proposed/planned/implemented way to address each threat.
      - question: We have a test case per threat and the software has passed the tests.
  Spoofing:
      - question: Try one credential after another and there's nothing to slow them down (online or offline) <3> 
      - question: Anonymously connect, because we expect authentication to be done at a higher level <4> 
      - question: Confuse a client because there are too many ways to identify a server <5> 
      - question: Spoof a server because identifiers aren't stored on the client and checked for consistency on re-connection (that is, there's no key persistence) <6> 
      - question: Connect to a server or peer over a link that isn't authenticated (and encrypted) <7> 
      - question: Steal credentials stored on the server and reuse them (for example, a key is stored in a world readable file) <8> 
      - question: Gets a password can reuse it (Use stronger authenticators) <9> 
      - question: Choose to use weaker or no authentication <10>
      - question: Steal credentials stored on the client and reuse them <J> 
      - question: Go after the way credentials are updated or recovered (account recovery doesn't require disclosing the old password) <Q> 
      - question: Your system ships with a default admin password, and doesn't force a change <K> 
    Tampering:
      - question: Take advantage of your custom key exchange or integrity control which you built instead of using standard crypto <3> 
      - question: Your code makes access control decisions all over the place, rather than with a security kernel <4> 
      - question: Replay data without detection because your code doesn't provide timestamps or sequence numbers <5> 
      - question: Write to a data store your code relies on <6> 
      - question: Bypass permissions because you don't make names canonical before checking access permissions <7> 
      - question: Manipulate data because there's no integrity protection for data on the network <8> 
      - question: Provide or control state information <9> 
      - question: Alter information in a data store because it has weak/open permissions or includes a group which is equivalent to everyone ("anyone with a Facebook account") <10> 
      - question: Write to some resource because permissions are granted to the world or there are no ACLs <J> 
      - question: Change parameters over a trust boundary and after validation (for example, important parameters in a hidden field in HTML, or passing a pointer to critical memory) <Q> 
      - question: Load code inside your process via an extension point <K> 
    Repudiation:
      - question: Pass data through the application to attack a log reader (e.g. splunk, elk, etc). <2>
      - question: A low privilege attacker can read interesting security information in the logs  <3>
      - question: Alter digital signatures because the digital signature system you're implementing is weak, or uses MACs where it should use a signature <4>
      - question: Alter log messages on a network because they lack strong integrity controls <5>
      - question: Create a log entry without a timestamp (or no log entry is timestamped) <6>
      - question: Make the logs wrap around and lose data <7>
      - question: Make a log lose or confuse security information <8>
      - question: Use a shared key to authenticate as different principals, confusing the information in the logs <9>
      - question: Get arbitrary data into logs from unauthenticated (or weakly authenticated) outsiders without validation< 10>
      - question: Edit logs and there's no way to tell (perhaps because there's no heartbeat option for the logging system) <J>
      - question: Say "I didn't do that," and you'd have no way to prove them wrong <Q>
      - question: The system has no logs <K>
    Information Disclosure:
      - question: Brute-force file encryption because there's no defense in place (example defense, password stretching) <2>
      - question: See error messages with security sensitive content <3>
      - question: Read content because messages (say, an email or HTTP cookie) aren't encrypted even if the channel is encrypted <4>
      - question: Be able to read a document or data because it's encrypted with a non-standard algorithm <5>
      - question: Read data because it's hidden or occluded (for undo or change tracking) and the user might forget that it's there <6>
      - question: Act as a 'man in the middle' because you don't authenticate endpoints of a network connection <7>
      - question: Access information through a search indexer, logger, or other such mechanism <8>
      - question: Read sensitive information in a file with bad ACLs <9>
      - question: Read information in files with no ACLs <10>
      - question: Discover the fixed key being used to encrypt <J>
      - question: Read the entire channel because the channel (say, HTTP or SMTP) isn't encrypted <Q>
      - question: Read network information because there's no cryptography used <K>
    Denial of Service:
      - question: Make your authentication system unusable or unavailable <2>
      - question: Drain our easily replacable battery (battery, temporary) <3>
      - question: Drain a battery that's hard to replace (sealed in a phone, an implanted medical device, or in a hard to reach location) (battery, persist) <4>
      - question: Spend our cloud budget (budget, persist) <5>
      - question: Make a server unavailable or unusable without ever authenticating but the problem goes away when the attacker stops (server, anonymous, temporary) <6>
      - question: Make a client unavailable or unusable and the problem persists after the attacker goes away (client, auth, persist) <7>
      - question: Make a server unavailable or unusable and the problem persists after the attacker goes away (server, auth, persist) <8>
      - question: Make a client unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (client, anon, persist) <9>
      - question: Make a server unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (server, anon, persist) <10>
      - question: Cause the logging subsystem to stop working  <J>
      - question: Amplify a Denial of Service attack through this component with amplification on the order of 10 to 1 <Q>
      - question: Amplify a denial of service attack through this component with amplification on the order of 100 to 1 <K>
    Elevation of Privilege:
      - question: Force data through different validation paths which give different results <5>
      - question: Take advantage of .NET permissions you ask for, but don't use <6>
      - question: Provide a pointer across a trust boundary, rather than data which can be validated <7>
      - question: Enter data that is checked while still under their control and used later on the other side of a trust boundary <8>
      - question: There's no reasonable way for a caller to figure out what validation of tainted data you perform before passing it to them <9>
      - question: There's no reasonable way for a caller to figure out what security assumptions you make <10>
      - question: Reflect input back to a user, like cross site scripting <J>
      - question: You include user-generated content within your page, possibly including the content of random URLs <Q>
      - question: Inject a command that the system will run at a higher privilege level <K>
resources:
  - "[Threat Modeling: What, Why, and How?](https://misti.com/infosec-insider/threat-modeling-what-why-and-how)."
  - "[Checklists above are from EoP](https://github.com/adamshostack/eop)."
tags: WebApp, API, Worker, iOS, Android
title: Threat Modeling



