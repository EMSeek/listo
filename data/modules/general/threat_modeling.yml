category: General
description: Threat Model! 
minimumRisk: Low Risk
checkLists:
Spoofing:
    - question: <3> Try one credential after another and there's nothing to slow them down (online or offline)
    - question: <4> Anonymously connect, because we expect authentication to be done at a higher level
    - question: <5> Confuse a client because there are too many ways to identify a server
    - question: <6> Spoof a server because identifiers aren't stored on the client and checked for consistency on re-connection (that is, there's no key persistence)
    - question: <7> Connect to a server or peer over a link that isn't authenticated (and encrypted)
    - question: <8> Steal credentials stored on the server and reuse them (for example, a key is stored in a world readable file)
    - question: <9> Gets a password can reuse it (Use stronger authenticators)
    - question: <10> Choose to use weaker or no authentication
    - question: <J> Steal credentials stored on the client and reuse them
    - question: <Q> Go after the way credentials are updated or recovered (account recovery doesn't require disclosing the old password)
    - question: <K> Your system ships with a default admin password, and doesn't force a change
  Tampering:
    - question: <3> Take advantage of your custom key exchange or integrity control which you built instead of using standard crypto
    - question: <4> Your code makes access control decisions all over the place, rather than with a security kernel
    - question: <5> Replay data without detection because your code doesn't provide timestamps or sequence numbers
    - question: <6> Write to a data store your code relies on
    - question: <7> Bypass permissions because you don't make names canonical before checking access permissions
    - question: <8> Manipulate data because there's no integrity protection for data on the network
    - question: <9> Provide or control state information
    - question: <10> Alter information in a data store because it has weak/open permissions or includes a group which is equivalent to everyone ("anyone with a Facebook account")
    - question: <J> Write to some resource because permissions are granted to the world or there are no ACLs
    - question: <Q> Change parameters over a trust boundary and after validation (for example, important parameters in a hidden field in HTML, or passing a pointer to critical memory)
    - question: <K> Load code inside your process via an extension point
  Repudiation:
    - question: <2> Pass data through the application to attack a log reader (e.g. Splunk, ELK, etc).
    - question: <3> A low privilege attacker can read interesting security information in the logs 
    - question: <4> Alter digital signatures because the digital signature system you're implementing is weak, or uses MACs where it should use a signature
    - question: <5> Alter log messages on a network because they lack strong integrity controls
    - question: <6> Create a log entry without a timestamp (or no log entry is timestamped)
    - question: <7> Make the logs wrap around and lose data
    - question: <8> Make a log lose or confuse security information
    - question: <9> Use a shared key to authenticate as different principals, confusing the information in the logs
    - question: <10> Get arbitrary data into logs from unauthenticated (or weakly authenticated) outsiders without validation
    - question: <J> Edit logs and there's no way to tell (perhaps because there's no heartbeat option for the logging system)
    - question: <Q> Say "I didn't do that," and you'd have no way to prove them wrong
    - question: <K> The system has no logs
  Information Disclosure:
    - question: <2> Brute-force file encryption because there's no defense in place (example defense, password stretching)
    - question: <3> See error messages with security sensitive content
    - question: <4> Read content because messages (say, an email or HTTP cookie) aren't encrypted even if the channel is encrypted
    - question: <5> Be able to read a document or data because it's encrypted with a non-standard algorithm
    - question: <6> Read data because it's hidden or occluded (for undo or change tracking) and the user might forget that it's there
    - question: <7> Act as a 'man in the middle' because you don't authenticate endpoints of a network connection
    - question: <8> Access information through a search indexer, logger, or other such mechanism
    - question: <9> Read sensitive information in a file with bad ACLs
    - question: <10> Read information in files with no ACLs
    - question: <J> Discover the fixed key being used to encrypt
    - question: <Q> Read the entire channel because the channel (say, HTTP or SMTP) isn't encrypted
    - question: <K> Read network information because there's no cryptography used
  Denial of Service:
    - question: <2> Make your authentication system unusable or unavailable
    - question: <3> Drain our easily replacable battery (battery, temporary)
    - question: <4> Drain a battery that's hard to replace (sealed in a phone, an implanted medical device, or in a hard to reach location) (battery, persist)
    - question: <5> Spend our cloud budget (budget, persist)
    - question: <6> Make a server unavailable or unusable without ever authenticating but the problem goes away when the attacker stops (server, anonymous, temporary)
    - question: <7> Make a client unavailable or unusable and the problem persists after the attacker goes away (client, auth, persist)
    - question: <8> Make a server unavailable or unusable and the problem persists after the attacker goes away (server, auth, persist)
    - question: <9> Make a client unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (client, anon, persist)
    - question: <10> Make a server unavailable or unusable without ever authenticating and the problem persists after the attacker goes away (server, anon, persist)
    - question: <J> Cause the logging subsystem to stop working 
    - question: <Q> Amplify a Denial of Service attack through this component with amplification on the order of 10 to 1
    - question: <K> Amplify a Denial of Service attack through this component with amplification on the order of 100 to 1
  Elevation of Privilege:
    - question: <5> Force data through different validation paths which give different results
    - question: <6> Take advantage of .NET permissions you ask for, but don't use
    - question: <7> Provide a pointer across a trust boundary, rather than data which can be validated
    - question: <8> Enter data that is checked while still under their control and used later on the other side of a trust boundary
    - question: <9> There's no reasonable way for a caller to figure out what validation of tainted data you perform before passing it to them
    - question: <10> There's no reasonable way for a caller to figure out what security assumptions you make
    - question: <J> Reflect input back to a user, like cross site scripting
    - question: <Q> You include user-generated content within your page, possibly including the content of random URLs
    - question: <K> Inject a command that the system will run at a higher privilege level
resources:
  - "[Threat Modeling: What, Why, and How?](https://misti.com/infosec-insider/threat-modeling-what-why-and-how)."
  - "[Checklists from EoP](https://github.com/adamshostack/eop)."
tags: WebApp, API, Worker, iOS, Android
title: Threat Modeling



